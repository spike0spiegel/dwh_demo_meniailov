DROP SCHEMA IF EXISTS bl_cl CASCADE;
CREATE SCHEMA IF NOT EXISTS bl_cl;

SET search_path = bl_cl;

DROP EXTENSION IF EXISTS file_fdw CASCADE;
CREATE EXTENSION file_fdw;
CREATE SERVER pglog FOREIGN DATA WRAPPER file_fdw;

DROP TABLE IF EXISTS bl_cl.logging;
CREATE TABLE IF NOT EXISTS bl_cl.logging (
	id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	procedure_name VARCHAR(100),
	affected_rows INT,
	event_date TIMESTAMPTZ,
	message VARCHAR(100));


---------------------------------------

DROP SCHEMA IF EXISTS sa_cash_sales CASCADE;
CREATE SCHEMA IF NOT EXISTS sa_cash_sales;

DROP FOREIGN TABLE IF EXISTS sa_cash_sales.ext_cash_sales;
CREATE FOREIGN TABLE sa_cash_sales.ext_cash_sales (
	id VARCHAR(4000),
	product_id VARCHAR(4000),
	store_id VARCHAR(4000),
	DAY VARCHAR(4000),
	quantity VARCHAR(4000),
	revenue VARCHAR(4000),
	regular_price VARCHAR(4000),
	COST VARCHAR(4000),
    	amount VARCHAR(4000),
    	product_name VARCHAR(4000),
    	category_id VARCHAR(4000),
    	category VARCHAR(4000),
    	promotion_id VARCHAR(4000),
    	promotion VARCHAR(4000),
    	store VARCHAR(4000),
    	store_address_id VARCHAR(4000),
    	store_address VARCHAR(4000),
    	store_city_id VARCHAR(4000),
    	store_city VARCHAR(4000),
    	employee_id VARCHAR(4000),
    	employee_firstname VARCHAR(4000),
    	employee_secondname VARCHAR(4000),
    	employee_birth VARCHAR(4000),
    	employee_city_id VARCHAR(4000),
    	employee_city VARCHAR(4000),
    	customer_id VARCHAR(4000),
    	customer_firstname VARCHAR(4000),
    	customer_surname VARCHAR(4000),
    	customer_gender VARCHAR(4000),
    	customer_birth VARCHAR(4000),
    	customer_email VARCHAR(4000),
    	customer_address_id VARCHAR(4000),
    	customer_address VARCHAR(4000),
    	customer_city_id VARCHAR(4000),
    	customer_city VARCHAR(4000),
    	payment_method_id VARCHAR(4000),
    	payment VARCHAR(4000),
    	transaction_id VARCHAR(4000)
	) SERVER pglog
OPTIONS (filename 'D:\Projects\EpamLabFiles\dataset\cash.CSV', format 'csv', delimiter ',', header 'true');

DROP TABLE IF EXISTS sa_cash_sales.src_cash_sales;
CREATE TABLE IF NOT EXISTS sa_cash_sales.src_cash_sales (
	id VARCHAR(4000),
	product_id VARCHAR(4000),
	store_id VARCHAR(4000),
	DAY VARCHAR(4000),
	quantity VARCHAR(4000),
	revenue VARCHAR(4000),
	regular_price VARCHAR(4000),
    	COST VARCHAR(4000),
    	amount VARCHAR(4000),
    	product_name VARCHAR(4000),
    	category_id VARCHAR(4000),
    	category VARCHAR(4000),
    	promotion_id VARCHAR(4000),
    	promotion VARCHAR(4000),
    	store VARCHAR(4000),
    	store_address_id VARCHAR(4000),
    	store_address VARCHAR(4000),
    	store_city_id VARCHAR(4000),
    	store_city VARCHAR(4000),
    	employee_id VARCHAR(4000),
    	employee_firstname VARCHAR(4000),
    	employee_secondname VARCHAR(4000),
    	employee_birth VARCHAR(4000),
    	employee_city_id VARCHAR(4000),
    	employee_city VARCHAR(4000),
    	customer_id VARCHAR(4000),
    	customer_firstname VARCHAR(4000),
    	customer_surname VARCHAR(4000),
    	customer_gender VARCHAR(4000),
    	customer_birth VARCHAR(4000),
    	customer_email VARCHAR(4000),
    	customer_address_id VARCHAR(4000),
    	customer_address VARCHAR(4000),
    	customer_city_id VARCHAR(4000),
    	customer_city VARCHAR(4000),
    	payment_method_id VARCHAR(4000),
    	payment VARCHAR(4000),
    	transaction_id VARCHAR(4000));
   
ALTER TABLE sa_cash_sales.src_cash_sales
ADD COLUMN is_processed BOOLEAN DEFAULT FALSE;

-----------------------------------		   
		   
DROP SCHEMA IF EXISTS sa_card_sales CASCADE;		   
CREATE SCHEMA IF NOT EXISTS sa_card_sales;

DROP FOREIGN TABLE IF EXISTS sa_card_sales.ext_card_sales;	
CREATE FOREIGN TABLE sa_card_sales.ext_card_sales (
	id VARCHAR(4000),
	product_id VARCHAR(4000),
	store_id VARCHAR(4000),
	date VARCHAR(4000),
	quantity VARCHAR(4000),
	revenue VARCHAR(4000),
    regular_price VARCHAR(4000),
    COST VARCHAR(4000),
    profit VARCHAR(4000),
    product_name VARCHAR(4000),
    category_id VARCHAR(4000),
    category_name VARCHAR(4000),
    promotion_id VARCHAR(4000),
    promotion_name VARCHAR(4000),
    store_name VARCHAR(4000),
    store_address_id VARCHAR(4000),
    store_city VARCHAR(4000),
    employee_id VARCHAR(4000),
    employee_surname VARCHAR(4000),
    employee_gender VARCHAR(4000),
    employee_birth VARCHAR(4000),
    employee_email VARCHAR(4000),
    employee_address_id VARCHAR(4000),
    employee_address VARCHAR(4000),
    employee_city_id VARCHAR(4000),
    employee_city VARCHAR(4000),
    customer_id VARCHAR(4000),
    customer_firstname VARCHAR(4000),
    customer_surname VARCHAR(4000),
    customer_gender VARCHAR(4000),
    customer_birth VARCHAR(4000),
    customer_email VARCHAR(4000),
    customer_address_id VARCHAR(4000),
    customer_address VARCHAR(4000),
   	customer_city_id VARCHAR(4000),
   	customer_city VARCHAR(4000),
   	payment_method_id VARCHAR(4000),
    payment_method VARCHAR(4000),
    transaction_id VARCHAR(4000)
	) SERVER pglog
OPTIONS (filename 'D:\Projects\EpamLabFiles\dataset\card.CSV', format 'csv', delimiter ',' , HEADER 'true');

DROP TABLE IF EXISTS sa_card_sales.src_card_sales;
CREATE TABLE IF NOT EXISTS sa_card_sales.src_card_sales (
	id VARCHAR(4000),
	product_id VARCHAR(4000),
	store_id VARCHAR(4000),
	date VARCHAR(4000),
	quantity VARCHAR(4000),
	revenue VARCHAR(4000),
    regular_price VARCHAR(4000),
    COST VARCHAR(4000),
    profit VARCHAR(4000),
    product_name VARCHAR(4000),
    category_id VARCHAR(4000),
    category_name VARCHAR(4000),
    promotion_id VARCHAR(4000),
    promotion_name VARCHAR(4000),
    store_name VARCHAR(4000),
    store_address_id VARCHAR(4000),
    store_city VARCHAR(4000),
    employee_id VARCHAR(4000),
    employee_surname VARCHAR(4000),
    employee_gender VARCHAR(4000),
    employee_birth VARCHAR(4000),
    employee_email VARCHAR(4000),
    employee_address_id VARCHAR(4000),
    employee_address VARCHAR(4000),
    employee_city_id VARCHAR(4000),
    employee_city VARCHAR(4000),
    customer_id VARCHAR(4000),
    customer_firstname VARCHAR(4000),
    customer_surname VARCHAR(4000),
    customer_gender VARCHAR(4000),
    customer_birth VARCHAR(4000),
    customer_email VARCHAR(4000),
    customer_address_id VARCHAR(4000),
    customer_address VARCHAR(4000),
   	customer_city_id VARCHAR(4000),
   	customer_city VARCHAR(4000),
   	payment_method_id VARCHAR(4000),
    payment_method VARCHAR(4000),
    transaction_id VARCHAR(4000));
   
ALTER TABLE sa_card_sales.src_card_sales
ADD COLUMN is_processed BOOLEAN DEFAULT FALSE;

-----------------

DROP SCHEMA IF EXISTS bl_3nf CASCADE;
CREATE SCHEMA IF NOT EXISTS bl_3nf;

CREATE TABLE IF NOT EXISTS BL_3NF.CE_PAYMENT_METHODS (
	PAYMENT_METHOD_ID int PRIMARY KEY,
	PAYMENT_METHOD_SRC_ID varchar(10),
	PAYMENT_METHOD varchar(10),
	TA_INSERT_DT date,
	TA_UPDATE_DT date,
	SOURCE_SYSTEM varchar(100),
	SOURCE_ENTITY varchar(100));

CREATE TABLE IF NOT EXISTS BL_3NF.CE_PROMOTIONS (
	PROMOTION_ID int PRIMARY KEY,
	PROMOTION_SRC_ID varchar(10),
	PROMOTION_NAME varchar(50),
	TA_INSERT_DT date,
	TA_UPDATE_DT date,
	SOURCE_SYSTEM varchar(100),
	SOURCE_ENTITY varchar(100));

CREATE TABLE IF NOT EXISTS BL_3NF.CE_CITIES (
	CITY_ID int PRIMARY KEY,
	CITY_SRC_ID varchar(10),
	CITY_NAME varchar(25),
	TA_INSERT_DT date,
	TA_UPDATE_DT date,
	SOURCE_SYSTEM varchar(100),
	SOURCE_ENTITY varchar(100));

CREATE TABLE IF NOT EXISTS BL_3NF.CE_ADDRESSES (
	ADDRESS_ID int PRIMARY KEY,
	ADDRESS_SRC_ID varchar(10),
	ADDRESS_STREET_ADDRESS varchar(50),
	CITY_ID int,
	TA_INSERT_DT date,
	TA_UPDATE_DT date,
	SOURCE_SYSTEM varchar(100),
	SOURCE_ENTITY varchar(100));

CREATE TABLE IF NOT EXISTS BL_3NF.CE_STORES (
	STORE_ID int PRIMARY KEY,
	STORE_SRC_ID varchar(10),
	STORE_NAME varchar(50),
	ADDRESS_ID int,
	TA_INSERT_DT date,
	TA_UPDATE_DT date,
	SOURCE_SYSTEM varchar(100),
	SOURCE_ENTITY varchar(100));


CREATE TABLE IF NOT EXISTS BL_3NF.CE_EMPLOYEES (
	EMPLOYEE_ID int PRIMARY KEY,
	EMPLOYEE_SRC_ID varchar(10),
	EMPLOYEE_FIRST_NAME varchar(25),
	EMPLOYEE_LAST_NAME varchar(25),
	EMPLOYEE_DATE_OF_BIRTH date,
	EMPLOYEE_GENDER varchar(5),
	EMPLOYEE_EMAIL varchar(50),
	ADDRESS_ID int,
	TA_INSERT_DT date,
	TA_UPDATE_DT date,
	SOURCE_SYSTEM varchar(100),
	SOURCE_ENTITY varchar(100));


CREATE TABLE IF NOT EXISTS BL_3NF.CE_CUSTOMERS_SCD (
	CUSTOMER_ID int,
	START_DT date,
	CUSTOMER_SRC_ID varchar(10),
	CUSTOMER_FIRST_NAME varchar(25),
	CUSTOMER_LAST_NAME varchar(25),
	CUSTOMER_DATE_OF_BIRTH date,
	CUSTOMER_GENDER varchar(5),
	CUSTOMER_EMAIL varchar(50),
	ADDRESS_ID int,
	END_DT date,
	IS_ACTIVE bool,
	TA_INSERT_DT date,
	SOURCE_SYSTEM varchar(100),
	SOURCE_ENTITY varchar(100));

CREATE TABLE IF NOT EXISTS BL_3NF.CE_CATEGORIES (
	CATEGORY_ID int PRIMARY KEY,
	CATEGORY_SRC_ID varchar(10),
	CATEGORY_NAME varchar(50),
	TA_INSERT_DT date,
	TA_UPDATE_DT date,
	SOURCE_SYSTEM varchar(100),
	SOURCE_ENTITY varchar(100));

CREATE TABLE IF NOT EXISTS BL_3NF.CE_PRODUCTS (
	PRODUCT_ID int PRIMARY KEY,
	PRODUCT_SRC_ID varchar(10),
	PRODUCT_NAME varchar(50),
	CATEGORY_ID int,
	TA_INSERT_DT date,
	TA_UPDATE_DT date,
	SOURCE_SYSTEM varchar(100),
	SOURCE_ENTITY varchar(100));

DROP TABLE IF EXISTS bl_3nf.ce_sales;
CREATE TABLE IF NOT EXISTS BL_3NF.CE_SALES (
	PRODUCT_ID int,
	CUSTOMER_ID int,
	STORE_ID int,
	EMPLOYEE_ID int,
	PROMOTION_ID int,
	PAYMENT_METHOD_ID int,
	SALE_TRANSACTION_ID varchar,
	EVENT_DT date,
	SALE_QUANTITY int,
	SALE_REVENUE decimal,
	SALE_REGULAR_PRICE decimal,
	SALE_COST decimal,
	SALE_AMOUNT decimal,
	TA_INSERT_DT date,
	TA_UPDATE_DT date)
PARTITION BY RANGE(EVENT_DT);

DROP TABLE IF EXISTS bl_3nf.ce_sales_201701; 
CREATE TABLE bl_3nf.ce_sales_201701 PARTITION OF bl_3nf.ce_sales
FOR VALUES FROM ('2017-01-01') TO ('2017-02-01');

DROP TABLE IF EXISTS bl_3nf.ce_sales_201702; 
CREATE TABLE bl_3nf.ce_sales_201702 PARTITION OF bl_3nf.ce_sales
FOR VALUES FROM ('2017-02-01') TO ('2017-03-01');

DROP TABLE IF EXISTS bl_3nf.ce_sales_201703; 
CREATE TABLE bl_3nf.ce_sales_201703 PARTITION OF bl_3nf.ce_sales
FOR VALUES FROM ('2017-03-01') TO ('2017-04-01');

DROP TABLE IF EXISTS bl_3nf.ce_sales_201704; 
CREATE TABLE bl_3nf.ce_sales_201704 PARTITION OF bl_3nf.ce_sales
FOR VALUES FROM ('2017-04-01') TO ('2017-05-01');

DROP TABLE IF EXISTS bl_3nf.ce_sales_201705; 
CREATE TABLE bl_3nf.ce_sales_201705 PARTITION OF bl_3nf.ce_sales
FOR VALUES FROM ('2017-05-01') TO ('2017-06-01');

DROP TABLE IF EXISTS bl_3nf.ce_sales_201706; 
CREATE TABLE bl_3nf.ce_sales_201706 PARTITION OF bl_3nf.ce_sales
FOR VALUES FROM ('2017-06-01') TO ('2017-07-01');

DROP TABLE IF EXISTS bl_3nf.ce_sales_201707; 
CREATE TABLE bl_3nf.ce_sales_201707 PARTITION OF bl_3nf.ce_sales
FOR VALUES FROM ('2017-07-01') TO ('2017-08-01');

DROP TABLE IF EXISTS bl_3nf.ce_sales_201708; 
CREATE TABLE bl_3nf.ce_sales_201708 PARTITION OF bl_3nf.ce_sales
FOR VALUES FROM ('2017-08-01') TO ('2017-09-01');

DROP TABLE IF EXISTS bl_3nf.ce_sales_201709; 
CREATE TABLE bl_3nf.ce_sales_201709 PARTITION OF bl_3nf.ce_sales
FOR VALUES FROM ('2017-09-01') TO ('2017-10-01');

DROP TABLE IF EXISTS bl_3nf.ce_sales_201710; 
CREATE TABLE bl_3nf.ce_sales_201710 PARTITION OF bl_3nf.ce_sales
FOR VALUES FROM ('2017-10-01') TO ('2017-11-01');

DROP TABLE IF EXISTS bl_3nf.ce_sales_201711; 
CREATE TABLE bl_3nf.ce_sales_201711 PARTITION OF bl_3nf.ce_sales
FOR VALUES FROM ('2017-11-01') TO ('2017-12-01');

DROP TABLE IF EXISTS bl_3nf.ce_sales_201712; 
CREATE TABLE bl_3nf.ce_sales_201712 PARTITION OF bl_3nf.ce_sales
FOR VALUES FROM ('2017-12-01') TO ('2018-01-01');

DROP TABLE IF EXISTS bl_3nf.ce_sales_201801; 
CREATE TABLE bl_3nf.ce_sales_201801 PARTITION OF bl_3nf.ce_sales
FOR VALUES FROM ('2018-01-01') TO ('2018-02-01');

DROP TABLE IF EXISTS bl_3nf.ce_sales_201802; 
CREATE TABLE bl_3nf.ce_sales_201802 PARTITION OF bl_3nf.ce_sales
FOR VALUES FROM ('2018-02-01') TO ('2018-03-01');

DROP TABLE IF EXISTS bl_3nf.ce_sales_201803; 
CREATE TABLE bl_3nf.ce_sales_201803 PARTITION OF bl_3nf.ce_sales
FOR VALUES FROM ('2018-03-01') TO ('2018-04-01');

DROP TABLE IF EXISTS bl_3nf.ce_sales_201804; 
CREATE TABLE bl_3nf.ce_sales_201804 PARTITION OF bl_3nf.ce_sales
FOR VALUES FROM ('2018-04-01') TO ('2018-05-01');

DROP TABLE IF EXISTS bl_3nf.ce_sales_201805; 
CREATE TABLE bl_3nf.ce_sales_201805 PARTITION OF bl_3nf.ce_sales
FOR VALUES FROM ('2018-05-01') TO ('2018-06-01');

DROP TABLE IF EXISTS bl_3nf.ce_sales_201806; 
CREATE TABLE bl_3nf.ce_sales_201806 PARTITION OF bl_3nf.ce_sales
FOR VALUES FROM ('2018-06-01') TO ('2018-07-01');

DROP TABLE IF EXISTS bl_3nf.ce_sales_201807; 
CREATE TABLE bl_3nf.ce_sales_201807 PARTITION OF bl_3nf.ce_sales
FOR VALUES FROM ('2018-07-01') TO ('2018-08-01');

DROP TABLE IF EXISTS bl_3nf.ce_sales_201808; 
CREATE TABLE bl_3nf.ce_sales_201808 PARTITION OF bl_3nf.ce_sales
FOR VALUES FROM ('2018-08-01') TO ('2018-09-01');

DROP TABLE IF EXISTS bl_3nf.ce_sales_201809; 
CREATE TABLE bl_3nf.ce_sales_201809 PARTITION OF bl_3nf.ce_sales
FOR VALUES FROM ('2018-09-01') TO ('2018-10-01');

DROP TABLE IF EXISTS bl_3nf.ce_sales_201810; 
CREATE TABLE bl_3nf.ce_sales_201810 PARTITION OF bl_3nf.ce_sales
FOR VALUES FROM ('2018-10-01') TO ('2018-11-01');

DROP TABLE IF EXISTS bl_3nf.ce_sales_201811; 
CREATE TABLE bl_3nf.ce_sales_201811 PARTITION OF bl_3nf.ce_sales
FOR VALUES FROM ('2018-11-01') TO ('2018-12-01');

DROP TABLE IF EXISTS bl_3nf.ce_sales_201812; 
CREATE TABLE bl_3nf.ce_sales_201812 PARTITION OF bl_3nf.ce_sales
FOR VALUES FROM ('2018-12-01') TO ('2019-01-01');

--SEQUENCE #1
CREATE SEQUENCE IF NOT EXISTS bl_3nf.city_id_seq
AS int
INCREMENT BY 1
START WITH 1
OWNED BY BL_3NF.CE_CITIES.CITY_ID;

--SEQUENCE #2
CREATE SEQUENCE IF NOT EXISTS bl_3nf.address_id_seq
AS int
INCREMENT BY 1
START WITH 1
OWNED BY BL_3NF.CE_ADDRESSES.ADDRESS_ID;

--SEQUENCE #3
CREATE SEQUENCE IF NOT EXISTS bl_3nf.category_id_seq
AS int
INCREMENT BY 1
START WITH 1
OWNED BY BL_3NF.CE_CATEGORIES.CATEGORY_ID;

--SEQUENCE #4
CREATE SEQUENCE IF NOT EXISTS bl_3nf.customer_id_seq
AS int
INCREMENT BY 1
START WITH 1
OWNED BY BL_3NF.CE_CUSTOMERS_SCD.CUSTOMER_ID;

--SEQUENCE #5
CREATE SEQUENCE IF NOT EXISTS bl_3nf.employee_id_seq
AS int
INCREMENT BY 1
START WITH 1
OWNED BY BL_3NF.CE_EMPLOYEES.EMPLOYEE_ID;

--SEQUENCE #6
CREATE SEQUENCE IF NOT EXISTS bl_3nf.payment_method_id_seq
AS int
INCREMENT BY 1
START WITH 1
OWNED BY BL_3NF.CE_PAYMENT_METHODS.PAYMENT_METHOD_ID;

--SEQUENCE #7
CREATE SEQUENCE IF NOT EXISTS bl_3nf.product_id_seq
AS int
INCREMENT BY 1
START WITH 1
OWNED BY BL_3NF.CE_PRODUCTS.PRODUCT_ID;

--SEQUENCE #8
CREATE SEQUENCE IF NOT EXISTS bl_3nf.promotion_id_seq
AS int
INCREMENT BY 1
START WITH 1
OWNED BY BL_3NF.CE_PROMOTIONS.PROMOTION_ID;

--SEQUENCE #9
CREATE SEQUENCE IF NOT EXISTS bl_3nf.store_id_seq
AS int
INCREMENT BY 1
START WITH 1
OWNED BY BL_3NF.CE_STORES.STORE_ID;
--
--FOREIGN KEY #1 address-city
ALTER TABLE BL_3NF.CE_ADDRESSES DROP CONSTRAINT IF EXISTS CE_ADDRESSES_FK_CITY_ID;
ALTER TABLE BL_3NF.CE_ADDRESSES ADD CONSTRAINT CE_ADDRESSES_FK_CITY_ID 
FOREIGN KEY (CITY_ID) REFERENCES BL_3NF.CE_CITIES (CITY_ID);

--FOREIGN KEY #2 store-address
ALTER TABLE BL_3NF.CE_STORES DROP CONSTRAINT IF EXISTS CE_STORES_FK_ADDRESS_ID;
ALTER TABLE BL_3NF.CE_STORES ADD CONSTRAINT CE_STORES_FK_ADDRESS_ID 
FOREIGN KEY (ADDRESS_ID) REFERENCES BL_3NF.CE_ADDRESSES (ADDRESS_ID);

--FOREIGN KEY #3 customer-address
ALTER TABLE BL_3NF.CE_CUSTOMERS_SCD DROP CONSTRAINT IF EXISTS CE_CUSTOMERS_FK_ADDRESS_ID;
ALTER TABLE BL_3NF.CE_CUSTOMERS_SCD ADD CONSTRAINT CE_CUSTOMERS_FK_ADDRESS_ID 
FOREIGN KEY (ADDRESS_ID) REFERENCES BL_3NF.CE_ADDRESSES (ADDRESS_ID);

--FOREIGN KEY #4 employee-address
ALTER TABLE BL_3NF.CE_EMPLOYEES DROP CONSTRAINT IF EXISTS CE_EMPLOYEES_FK_ADDRESS_ID;
ALTER TABLE BL_3NF.CE_EMPLOYEES ADD CONSTRAINT CE_EMPLOYEES_FK_ADDRESS_ID 
FOREIGN KEY (ADDRESS_ID) REFERENCES BL_3NF.CE_ADDRESSES (ADDRESS_ID);

--FOREIGN KEY #5 product-category
ALTER TABLE BL_3NF.CE_PRODUCTS DROP CONSTRAINT IF EXISTS CE_PRODUCTS_FK_CATEGORY_ID;
ALTER TABLE BL_3NF.CE_PRODUCTS ADD CONSTRAINT CE_PRODUCTS_FK_CATEGORY_ID 
FOREIGN KEY (CATEGORY_ID) REFERENCES BL_3NF.CE_CATEGORIES (CATEGORY_ID);

--FOREIGN KEY #6 fact-product
ALTER TABLE BL_3NF.CE_SALES DROP CONSTRAINT IF EXISTS CE_SALES_FK_PRODUCT_ID;
ALTER TABLE BL_3NF.CE_SALES ADD CONSTRAINT CE_SALES_FK_PRODUCT_ID 
FOREIGN KEY (PRODUCT_ID) REFERENCES BL_3NF.CE_PRODUCTS (PRODUCT_ID);

--FOREIGN KEY #7 fact-employee
ALTER TABLE BL_3NF.CE_SALES DROP CONSTRAINT IF EXISTS CE_SALES_FK_EMPLOYEE_ID;
ALTER TABLE BL_3NF.CE_SALES ADD CONSTRAINT CE_SALES_FK_EMPLOYEE_ID 
FOREIGN KEY (EMPLOYEE_ID) REFERENCES BL_3NF.CE_EMPLOYEES (EMPLOYEE_ID);

--FOREIGN KEY #8 fact-payment_method
ALTER TABLE BL_3NF.CE_SALES DROP CONSTRAINT IF EXISTS CE_SALES_FK_PAYMENT_METHOD_ID;
ALTER TABLE BL_3NF.CE_SALES ADD CONSTRAINT CE_SALES_FK_PAYMENT_METHOD_ID 
FOREIGN KEY (PAYMENT_METHOD_ID) REFERENCES BL_3NF.CE_PAYMENT_METHODS (PAYMENT_METHOD_ID);


--FOREIGN KEY #9 fact-promotion
ALTER TABLE BL_3NF.CE_SALES DROP CONSTRAINT IF EXISTS CE_SALES_FK_PROMOTION_ID;
ALTER TABLE BL_3NF.CE_SALES ADD CONSTRAINT CE_SALES_FK_PROMOTION_ID 
FOREIGN KEY (PROMOTION_ID) REFERENCES BL_3NF.CE_PROMOTIONS (PROMOTION_ID);

--FOREIGN KEY #10 fact-store
ALTER TABLE BL_3NF.CE_SALES DROP CONSTRAINT IF EXISTS CE_SALES_FK_STORE_ID;
ALTER TABLE BL_3NF.CE_SALES ADD CONSTRAINT CE_SALES_FK_STORE_ID 
FOREIGN KEY (STORE_ID) REFERENCES BL_3NF.CE_STORES (STORE_ID);


--COMPOSITE KEY customers
ALTER TABLE BL_3NF.CE_CUSTOMERS_SCD DROP CONSTRAINT IF EXISTS CE_CUSTOMERS_COMPOSITE_KEY;
ALTER TABLE BL_3NF.CE_CUSTOMERS_SCD ADD CONSTRAINT CE_CUSTOMERS_COMPOSITE_KEY
PRIMARY KEY (CUSTOMER_ID, START_DT);

--FACT COMPOSITE
ALTER TABLE BL_3NF.CE_SALES DROP CONSTRAINT IF EXISTS CE_SALES_COMPOSITE_KEY;
ALTER TABLE BL_3NF.CE_SALES ADD CONSTRAINT CE_SALES_COMPOSITE_KEY
UNIQUE (product_id, customer_id, store_id, employee_id, promotion_id, payment_method_id, event_dt, sale_transaction_id);

--PROMOTIONS UNIQUE FOR SCD1
ALTER TABLE bl_3nf.ce_promotions DROP CONSTRAINT IF EXISTS ce_promotions_unique;
ALTER TABLE bl_3nf.ce_promotions ADD CONSTRAINT ce_promotions_unique
UNIQUE (promotion_src_id, source_system);

--------------- DEFAULT ROWS -------
--I'll have 9 default rows.

--DEFAULT ROW #1 CITIES

INSERT INTO BL_3NF.CE_CITIES 	(CITY_ID, 
								CITY_SRC_ID, 
								CITY_NAME,
								TA_INSERT_DT, 
								TA_UPDATE_DT, 
								SOURCE_SYSTEM, 
								SOURCE_ENTITY)
VALUES 	(-1,
		'n. a.',
		'n. a.',
		date '1900-1-1',
		date '1900-1-1',
		'MANUAL',
		'MANUAL');

--DEFAULT ROW #2 ADDRESSES

INSERT INTO BL_3NF.CE_ADDRESSES 	(ADDRESS_ID,
									ADDRESS_SRC_ID,
									ADDRESS_STREET_ADDRESS,
									CITY_ID,
									TA_INSERT_DT,
									TA_UPDATE_DT,
									SOURCE_SYSTEM,
									SOURCE_ENTITY)
VALUES 						(-1,
							'n. a.',
							'n. a.',
							-1,
							date '1900-1-1',
							date '1900-1-1',
							'MANUAL',
							'MANUAL');

--DEFAULT ROW #3 CATEGORIES

INSERT INTO BL_3NF.CE_CATEGORIES 	(CATEGORY_ID,
									CATEGORY_SRC_ID,
									CATEGORY_NAME,
									TA_INSERT_DT,
									TA_UPDATE_DT,
									SOURCE_SYSTEM,
									SOURCE_ENTITY)
VALUES 	(-1,
		'n. a.',
		'n. a.',
		date '1900-1-1',
		date '1900-1-1',
		'MANUAL',
		'MANUAL');

--DEFAULT ROW #4 PRODUCTS

INSERT INTO BL_3NF.CE_PRODUCTS		(PRODUCT_ID,
									PRODUCT_SRC_ID,
									PRODUCT_NAME,
									CATEGORY_ID,
									TA_INSERT_DT,
									TA_UPDATE_DT,
									SOURCE_SYSTEM,
									SOURCE_ENTITY)
VALUES 	(-1,
		'n. a.',
		'n. a.',
		-1,
		date '1900-1-1',
		date '1900-1-1',
		'MANUAL',
		'MANUAL');

--DEFAULT ROW #5 CUSTOMERS

INSERT INTO BL_3NF.CE_CUSTOMERS_SCD	(CUSTOMER_ID,
									START_DT,
									CUSTOMER_SRC_ID,
									CUSTOMER_FIRST_NAME,
									CUSTOMER_LAST_NAME,
									CUSTOMER_DATE_OF_BIRTH,
									CUSTOMER_GENDER,
									CUSTOMER_EMAIL,
									ADDRESS_ID,
									END_DT,
									IS_ACTIVE, 
									TA_INSERT_DT,
									SOURCE_SYSTEM,
									SOURCE_ENTITY)
VALUES 	(-1,
		date '1900-1-1',
		'n. a.',
		'n. a.',
		'n. a.',
		date '1900-1-1',
		'n. a.',
		'n. a.',
		-1,
		date '9999-12-31',
		TRUE,
		date '1900-1-1',
		'MANUAL',
		'MANUAL');

--DEFAULT ROW #6 EMPLOYEES

INSERT INTO BL_3NF.CE_EMPLOYEES	(EMPLOYEE_ID,
								EMPLOYEE_SRC_ID,
								EMPLOYEE_FIRST_NAME,
								EMPLOYEE_LAST_NAME,
								EMPLOYEE_DATE_OF_BIRTH,
								EMPLOYEE_GENDER,
								EMPLOYEE_EMAIL,
								ADDRESS_ID, 
								TA_INSERT_DT,
								TA_UPDATE_DT,
								SOURCE_SYSTEM,
								SOURCE_ENTITY)
VALUES 	(-1,
		'n. a.',
		'n. a.',
		'n. a.',
		date '1900-1-1',
		'n. a.',
		'n. a.',
		-1,
		date '1900-1-1',
		date '1900-1-1',
		'MANUAL',
		'MANUAL');

--DEFAULT ROW #7 STORES

INSERT INTO BL_3NF.CE_STORES 	(STORE_ID,
								STORE_SRC_ID,
								STORE_NAME,
								ADDRESS_ID,
								TA_INSERT_DT,
								TA_UPDATE_DT,
								SOURCE_SYSTEM,
								SOURCE_ENTITY)
VALUES 	(-1,
		'n. a.',
		'n. a.',
		-1,
		date '1900-1-1',
		date '1900-1-1',
		'MANUAL',
		'MANUAL');

--DEFAULT ROW #8 PROMOTIONS

INSERT INTO BL_3NF.CE_PROMOTIONS 	(PROMOTION_ID,
									PROMOTION_SRC_ID,
									PROMOTION_NAME,
									TA_INSERT_DT,
									TA_UPDATE_DT,
									SOURCE_SYSTEM,
									SOURCE_ENTITY)
VALUES 	(-1,
		'n. a.',
		'n. a.',
		date '1900-1-1',
		date '1900-1-1',
		'MANUAL',
		'MANUAL');

--DEFAULT ROW #9 PAYMENT METHODS

INSERT INTO BL_3NF.CE_PAYMENT_METHODS 	(PAYMENT_METHOD_ID,
										PAYMENT_METHOD_SRC_ID,
										PAYMENT_METHOD,
										TA_INSERT_DT,
										TA_UPDATE_DT,
										SOURCE_SYSTEM,
										SOURCE_ENTITY)
VALUES 	(-1,
		'n. a.',
		'n. a.',
		date '1900-1-1',
		date '1900-1-1',
		'MANUAL',
		'MANUAL');

-----------------------------

DROP SCHEMA IF EXISTS bl_dm CASCADE;	
CREATE SCHEMA IF NOT EXISTS bl_dm;

CREATE TABLE IF NOT EXISTS bl_dm.dim_payment_methods (
	payment_method_surr_id INT PRIMARY KEY,
	payment_method_src_id VARCHAR(10),
	payment_method VARCHAR(10),
	ta_insert_dt DATE,
	ta_update_dt DATE,
	source_system varchar(100),
	source_entity varchar(100));
	
CREATE TABLE IF NOT EXISTS bl_dm.dim_promotions (
	promotion_surr_id INT PRIMARY KEY,
	promotion_src_id VARCHAR(10),
	promotion_name VARCHAR(50),
	ta_insert_dt DATE,
	ta_update_dt DATE,
	source_system varchar(100),
	source_entity varchar(100));

CREATE TYPE bl_dm.address AS (
	street_address VARCHAR(50),
	city_name VARCHAR(50));
	
CREATE TABLE IF NOT EXISTS bl_dm.dim_stores (
	store_surr_id INT PRIMARY KEY,
	store_src_id VARCHAR(10),
	store_name VARCHAR(50),
	store_address_id INT,
	store_city_id INT,
	store_address bl_dm.address,
	ta_insert_dt DATE,
	ta_update_dt DATE,
	source_system varchar(100),
	source_entity varchar(100));
	
CREATE TABLE IF NOT EXISTS bl_dm.dim_employees (
	employee_surr_id INT PRIMARY KEY,
	employee_src_id VARCHAR(10),
	employee_first_name VARCHAR(25),
	employee_last_name VARCHAR(25),
	employee_date_of_birth DATE,
	employee_gender VARCHAR(5),
	employee_email VARCHAR(50),
	employee_address_id INT,
	employee_street_address VARCHAR(50),
	employee_city_id INT,
	employee_city_name VARCHAR(25),
	ta_insert_dt DATE,
	ta_update_dt DATE,
	source_system varchar(100),
	source_entity varchar(100));
	
CREATE TABLE IF NOT EXISTS bl_dm.dim_customers_scd (
	customer_surr_id INT PRIMARY KEY,
	customer_src_id	VARCHAR(10),
	customer_first_name	VARCHAR(25),
	customer_last_name VARCHAR(25),
	customer_date_of_birth DATE,
	customer_gender	VARCHAR(5),
	customer_email VARCHAR(50),
	customer_address_id INT,
	customer_street_address	VARCHAR(50),
	customer_city_id INT,
	customer_city_name VARCHAR(25),
	start_dt DATE,
	end_dt DATE,
	is_active BOOLEAN,
	ta_insert_dt DATE,
	source_system varchar(100),
	source_entity varchar(100));
	
CREATE TABLE IF NOT EXISTS bl_dm.dim_products (
	product_surr_id	INT PRIMARY KEY,
	product_src_id VARCHAR(10),
	product_name VARCHAR(50),
	product_category_id	INT,
	product_category_name	VARCHAR(50),
	ta_insert_dt DATE,
	ta_update_dt DATE,
	source_system varchar(100),
	source_entity varchar(100));

CREATE FOREIGN TABLE bl_dm.ext_dates (
	date_id INT,
    date_date DATE,
    date_full_date_description VARCHAR(25),
    date_day_of_week VARCHAR(20),
    date_day_number_in_calendar_month INT,
    date_day_number_in_calendar_year INT,
    date_day_number_in_fiscal_month INT,
    date_day_number_in_fiscal_year INT,
    date_last_day_in_month DATE,
    date_week_ending_date DATE,
    date_week_number INT,
    date_month_name VARCHAR(20),
    date_month_number INT,
    date_year_month VARCHAR(7),
    date_quarter VARCHAR(5),
    date_year_quarter VARCHAR(8),
    date_year INT,
    date_half_year VARCHAR(2),
    date_is_holiday BOOLEAN,
    date_is_weekend BOOLEAN)
    SERVER pglog
OPTIONS (filename 'D:\Projects\EpamLabFiles\date_dimension.csv', format 'csv', delimiter ',', header 'True');

CREATE TABLE IF NOT EXISTS bl_dm.dim_dates (
	date_id INT,
    date_date DATE,
    date_full_date_description VARCHAR(100),
    date_day_of_week VARCHAR(20),
    date_day_number_in_calendar_month INT,
    date_day_number_in_calendar_year INT,
    date_day_number_in_fiscal_month INT,
    date_day_number_in_fiscal_year INT,
    date_last_day_in_month DATE,
    date_week_ending_date DATE,
    date_week_number INT,
    date_month_name VARCHAR(20),
    date_month_number INT,
    date_year_month VARCHAR(7),
    date_quarter VARCHAR(5),
    date_year_quarter VARCHAR(8),
    date_year INT,
    date_half_year VARCHAR(2),
    date_is_holiday BOOLEAN,
    date_is_weekend BOOLEAN);

INSERT INTO bl_dm.dim_dates
SELECT * FROM bl_dm.ext_dates;

DROP TABLE IF EXISTS bl_dm.fct_sales_dd;
CREATE TABLE IF NOT EXISTS bl_dm.fct_sales_dd (
	product_surr_id	INT,
	customer_surr_id INT,
	store_surr_id INT,
	employee_surr_id INT,
	promotion_surr_id INT,
	payment_method_surr_id INT,
	sale_transaction_id	VARCHAR,
	sale_profit_margin DECIMAL,
	sale_return_of_investment DECIMAL,
	event_dt INT,
	sale_quantity INT,
	sale_revenue DECIMAL,
	sale_regular_price DECIMAL,
	sale_cost DECIMAL,
	sale_amount	DECIMAL,
	ta_insert_dt DATE,
	ta_update_dt DATE)
PARTITION BY RANGE(event_dt);

DROP TABLE IF EXISTS bl_dm.fct_sales_dd_201701; 
CREATE TABLE bl_dm.fct_sales_dd_201701 PARTITION OF bl_dm.fct_sales_dd
FOR VALUES FROM ('20170101') TO ('20170201');

DROP TABLE IF EXISTS bl_dm.fct_sales_dd_201702; 
CREATE TABLE bl_dm.fct_sales_dd_201702 PARTITION OF bl_dm.fct_sales_dd
FOR VALUES FROM ('20170201') TO ('20170301');

DROP TABLE IF EXISTS bl_dm.fct_sales_dd_201703; 
CREATE TABLE bl_dm.fct_sales_dd_201703 PARTITION OF bl_dm.fct_sales_dd
FOR VALUES FROM ('20170301') TO ('20170401');

DROP TABLE IF EXISTS bl_dm.fct_sales_dd_201704; 
CREATE TABLE bl_dm.fct_sales_dd_201704 PARTITION OF bl_dm.fct_sales_dd
FOR VALUES FROM ('20170401') TO ('20170501');

DROP TABLE IF EXISTS bl_dm.fct_sales_dd_201705; 
CREATE TABLE bl_dm.fct_sales_dd_201705 PARTITION OF bl_dm.fct_sales_dd
FOR VALUES FROM ('20170501') TO ('20170601');

DROP TABLE IF EXISTS bl_dm.fct_sales_dd_201706; 
CREATE TABLE bl_dm.fct_sales_dd_201706 PARTITION OF bl_dm.fct_sales_dd
FOR VALUES FROM ('20170601') TO ('20170701');

DROP TABLE IF EXISTS bl_dm.fct_sales_dd_201707; 
CREATE TABLE bl_dm.fct_sales_dd_201707 PARTITION OF bl_dm.fct_sales_dd
FOR VALUES FROM ('20170701') TO ('20170801');

DROP TABLE IF EXISTS bl_dm.fct_sales_dd_201708; 
CREATE TABLE bl_dm.fct_sales_dd_201708 PARTITION OF bl_dm.fct_sales_dd
FOR VALUES FROM ('20170801') TO ('20170901');

DROP TABLE IF EXISTS bl_dm.fct_sales_dd_201709; 
CREATE TABLE bl_dm.fct_sales_dd_201709 PARTITION OF bl_dm.fct_sales_dd
FOR VALUES FROM ('20170901') TO ('20171001');

DROP TABLE IF EXISTS bl_dm.fct_sales_dd_201710; 
CREATE TABLE bl_dm.fct_sales_dd_201710 PARTITION OF bl_dm.fct_sales_dd
FOR VALUES FROM ('20171001') TO ('20171101');

DROP TABLE IF EXISTS bl_dm.fct_sales_dd_201711; 
CREATE TABLE bl_dm.fct_sales_dd_201711 PARTITION OF bl_dm.fct_sales_dd
FOR VALUES FROM ('20171101') TO ('20171201');

DROP TABLE IF EXISTS bl_dm.fct_sales_dd_201712; 
CREATE TABLE bl_dm.fct_sales_dd_201712 PARTITION OF bl_dm.fct_sales_dd
FOR VALUES FROM ('20171201') TO ('20180101');

DROP TABLE IF EXISTS bl_dm.fct_sales_dd_201801; 
CREATE TABLE bl_dm.fct_sales_dd_201801 PARTITION OF bl_dm.fct_sales_dd
FOR VALUES FROM ('20180101') TO ('20180201');

DROP TABLE IF EXISTS bl_dm.fct_sales_dd_201802; 
CREATE TABLE bl_dm.fct_sales_dd_201802 PARTITION OF bl_dm.fct_sales_dd
FOR VALUES FROM ('20180201') TO ('20180301');

DROP TABLE IF EXISTS bl_dm.fct_sales_dd_201803; 
CREATE TABLE bl_dm.fct_sales_dd_201803 PARTITION OF bl_dm.fct_sales_dd
FOR VALUES FROM ('20180301') TO ('20180401');

DROP TABLE IF EXISTS bl_dm.fct_sales_dd_201804; 
CREATE TABLE bl_dm.fct_sales_dd_201804 PARTITION OF bl_dm.fct_sales_dd
FOR VALUES FROM ('20180401') TO ('20180501');

DROP TABLE IF EXISTS bl_dm.fct_sales_dd_201805; 
CREATE TABLE bl_dm.fct_sales_dd_201805 PARTITION OF bl_dm.fct_sales_dd
FOR VALUES FROM ('20180501') TO ('20180601');

DROP TABLE IF EXISTS bl_dm.fct_sales_dd_201806; 
CREATE TABLE bl_dm.fct_sales_dd_201806 PARTITION OF bl_dm.fct_sales_dd
FOR VALUES FROM ('20180601') TO ('20180701');

DROP TABLE IF EXISTS bl_dm.fct_sales_dd_201807; 
CREATE TABLE bl_dm.fct_sales_dd_201807 PARTITION OF bl_dm.fct_sales_dd
FOR VALUES FROM ('20180701') TO ('20180801');

DROP TABLE IF EXISTS bl_dm.fct_sales_dd_201808; 
CREATE TABLE bl_dm.fct_sales_dd_201808 PARTITION OF bl_dm.fct_sales_dd
FOR VALUES FROM ('20180801') TO ('20180901');

DROP TABLE IF EXISTS bl_dm.fct_sales_dd_201809; 
CREATE TABLE bl_dm.fct_sales_dd_201809 PARTITION OF bl_dm.fct_sales_dd
FOR VALUES FROM ('20180901') TO ('20181001');

DROP TABLE IF EXISTS bl_dm.fct_sales_dd_201810; 
CREATE TABLE bl_dm.fct_sales_dd_201810 PARTITION OF bl_dm.fct_sales_dd
FOR VALUES FROM ('20181001') TO ('20181101');

DROP TABLE IF EXISTS bl_dm.fct_sales_dd_201811; 
CREATE TABLE bl_dm.fct_sales_dd_201811 PARTITION OF bl_dm.fct_sales_dd
FOR VALUES FROM ('20181101') TO ('20181201');

DROP TABLE IF EXISTS bl_dm.fct_sales_dd_201812; 
CREATE TABLE bl_dm.fct_sales_dd_201812 PARTITION OF bl_dm.fct_sales_dd
FOR VALUES FROM ('20181201') TO ('20190101');
	
CREATE SEQUENCE IF NOT EXISTS bl_dm.seq_dim_customers_scd
AS int
INCREMENT BY 1
START WITH 1
OWNED BY bl_dm.dim_customers_scd.customer_surr_id;

CREATE SEQUENCE IF NOT EXISTS bl_dm.seq_dim_employees
AS int
INCREMENT BY 1
START WITH 1
OWNED BY bl_dm.dim_employees.employee_surr_id;

CREATE SEQUENCE IF NOT EXISTS bl_dm.seq_dim_payment_methods
AS int
INCREMENT BY 1
START WITH 1
OWNED BY bl_dm.dim_payment_methods.payment_method_surr_id;

CREATE SEQUENCE IF NOT EXISTS bl_dm.seq_dim_products
AS int
INCREMENT BY 1
START WITH 1
OWNED BY bl_dm.dim_products.product_surr_id;

CREATE SEQUENCE IF NOT EXISTS bl_dm.seq_dim_promotions
AS int
INCREMENT BY 1
START WITH 1
OWNED BY bl_dm.dim_promotions.promotion_surr_id;

CREATE SEQUENCE IF NOT EXISTS bl_dm.seq_dim_stores
AS int
INCREMENT BY 1
START WITH 1
OWNED BY bl_dm.dim_stores.store_surr_id;

--ALTER TABLE bl_dm.fct_sales_dd DROP CONSTRAINT IF EXISTS fact_customer_reference;
--ALTER TABLE bl_dm.fct_sales_dd ADD CONSTRAINT fact_customer_reference 
--FOREIGN KEY (customer_surr_id) REFERENCES bl_dm.dim_customers_scd (customer_surr_id);
--
--ALTER TABLE bl_dm.fct_sales_dd DROP CONSTRAINT IF EXISTS fact_employee_reference;
--ALTER TABLE bl_dm.fct_sales_dd ADD CONSTRAINT fact_employee_reference 
--FOREIGN KEY (employee_surr_id) REFERENCES bl_dm.dim_employees (employee_surr_id);
--
--ALTER TABLE bl_dm.fct_sales_dd DROP CONSTRAINT IF EXISTS fact_payment_method_reference;
--ALTER TABLE bl_dm.fct_sales_dd ADD CONSTRAINT fact_payment_method_reference 
--FOREIGN KEY (payment_method_surr_id) REFERENCES bl_dm.dim_payment_methods (payment_method_surr_id);
--
--ALTER TABLE bl_dm.fct_sales_dd DROP CONSTRAINT IF EXISTS fact_product_reference;
--ALTER TABLE bl_dm.fct_sales_dd ADD CONSTRAINT fact_product_reference 
--FOREIGN KEY (product_surr_id) REFERENCES bl_dm.dim_products (product_surr_id);
--
--ALTER TABLE bl_dm.fct_sales_dd DROP CONSTRAINT IF EXISTS fact_promotion_reference;
--ALTER TABLE bl_dm.fct_sales_dd ADD CONSTRAINT fact_promotion_reference 
--FOREIGN KEY (promotion_surr_id) REFERENCES bl_dm.dim_promotions (promotion_surr_id);
--
--ALTER TABLE bl_dm.fct_sales_dd DROP CONSTRAINT IF EXISTS fact_store_reference;
--ALTER TABLE bl_dm.fct_sales_dd ADD CONSTRAINT fact_store_reference 
--FOREIGN KEY (store_surr_id) REFERENCES bl_dm.dim_stores (store_surr_id);

INSERT INTO bl_dm.dim_customers_scd (
    customer_surr_id,
    customer_src_id,
    customer_first_name,
    customer_last_name,
    customer_date_of_birth,
    customer_gender,
    customer_email,
    customer_address_id,
    customer_street_address,
    customer_city_id,
    customer_city_name,
    start_dt,
    end_dt,
    is_active,
    ta_insert_dt,
    source_system,
    source_entity
)
VALUES (
    -1,              
    'n. a.',         
    'n. a.',            
    'n. a.',             
     date'1900-01-01',      
    'n. a.',         
    'n. a.',             
    -1,                
    'n. a.',             
    -1,                
    'n. a.',             
    date '1900-01-01',      
    date '9999-12-31',      
    TRUE,              
    date'1900-01-01',      
    'MANUAL',   
    'MANUAL'    
);

INSERT INTO bl_dm.dim_employees (
    employee_surr_id,
    employee_src_id,
    employee_first_name,
    employee_last_name,
    employee_date_of_birth,
    employee_gender,
    employee_email,
    employee_address_id,
    employee_street_address,
    employee_city_id,
    employee_city_name,
    ta_insert_dt,
    ta_update_dt,
    source_system,
    source_entity
)
VALUES (
    -1,              
    'n. a.',         
    'n. a.',            
    'n. a.',             
     date'1900-01-01',      
    'n. a.',         
    'n. a.',             
    -1,                
    'n. a.',             
    -1,                
    'n. a.',             
    date '1900-01-01',      
    date '9999-12-31',          
    'MANUAL',   
    'MANUAL'    
);

INSERT INTO bl_dm.dim_payment_methods (
    payment_method_surr_id,
    payment_method_src_id,
    payment_method,
    ta_insert_dt,
    ta_update_dt,
    source_system,
    source_entity
)
VALUES (
    -1,       
    'n. a.',          
    'n. a.',          
    date'1900-01-01',      
    date'1900-01-01',        
    'MANUAL',    
    'MANUAL'     
);

INSERT INTO bl_dm.dim_promotions (
    promotion_surr_id,
    promotion_src_id,
    promotion_name,
    ta_insert_dt,
    ta_update_dt,
    source_system,
    source_entity
)
VALUES (
    -1,
    'n. a.',
    'n. a.',
    date'1900-01-01',
    date'1900-01-01',
    'MANUAL',
    'MANUAL'
);

INSERT INTO bl_dm.dim_stores (
    store_surr_id,
    store_src_id,
    store_name,
    store_address_id,
    store_city_id,
    store_address,
    ta_insert_dt,
    ta_update_dt,
    source_system,
    source_entity
)
VALUES (
    -1,
    'n. a.',
    'n. a.',
    -1,
    -1,
    ROW('n. a.', 'n. a.'),
    date'1900-01-01',
    date'1900-01-01',
    'MANUAL',
    'MANUAL');

INSERT INTO bl_dm.dim_products (
    product_surr_id,
    product_src_id,
    product_name,
    product_category_id,
    product_category_name,
    ta_insert_dt,
    ta_update_dt,
    source_system,
    source_entity
)
VALUES (
    -1,
    'n. a.',
    'n. a.',
    -1,
    'n. a.',
    date'1900-01-01',
    date'1900-01-01',
    'MANUAL',
    'MANUAL');
-------------------------------------------------------
